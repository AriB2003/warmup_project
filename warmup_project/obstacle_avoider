import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import math

bump_status = None
        

class ObstacleAvoiderNode(Node):
    """This is an obstacle avoiding node which inherits from Node."""
    def __init__(self):
        super().__init__("obstacle_avoider_node")
        #Create timer
        timer_period = 0.1
        self.scan_results = None
        self.timer = self.create_timer(timer_period, self.run_loop)
        self.sub = self.create_subscription(LaserScan, 'scan', self.process_scan, 10)
        self.publisher = self.create_publisher(Twist, "cmd_vel", 10)

    def process_scan(self, msg):
        """Reads scan data from the Neato's LIDAR sensor"""
        self.scan_results = msg.ranges
        print(msg.ranges)
        
    def run_loop(self):
        """Compares the heading of the neato to the heading of the closest wall,
        and sends a velocity messsage to the neato to correct the heading."""

        #Ensures a scan has been completed before writing data
        if (self.scan_results != None):
            
            sum_of_vectors = [0.0,0.0]
            # Generate vector from all relevant points
            for i in range(45):
                current_vector = calculate_potential_vector(i, self.scan_results[i])
                sum_of_vectors[0] += current_vector[0]
                sum_of_vectors[1] += current_vector[1]
                
            for i in range(315,360):
                current_vector = calculate_potential_vector(i, self.scan_results[i])
                sum_of_vectors[0] += current_vector[0]
                sum_of_vectors[1] += current_vector[1]


            
def calculate_potential_vector(angle, distance):
    relative_weight = 45 - min(abs(360-angle), abs(0-angle)) # points in the middle should be more heavily weighted
    theta = angle+180
    r = (0.1/distance) * relative_weight
    potential_vector = [r*math.cos(math.radians(theta)), r*math.sin(math.radians(theta))]
    return potential_vector

def main(args=None):
    """Initialize our node, run it, and cleanup on shutdown."""
    rclpy.init(args=args)
    node = WallFollowerNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
